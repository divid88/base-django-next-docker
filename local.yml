
services:
  api: &api
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    image: base_prod_api
    container_name: base_prod_api
    volumes:
      - .:/app:z
      - ./staticfiles:/app/staticfiles
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"
    env_file:
      - ./.envs/.env.local  # docker compose -f local.yml config
    depends_on:
      - postgres
      - mailpit
      # - redis
    command: /start
    networks:
      - base_prod_nw  # docker network create base_prod_nw

  postgres:
    build:
      context: .
      dockerfile: ./docker/local/postgres/Dockerfile
    image: base_postgres
    container_name: base_postgres
    ports:
      - "5432:5432"
    volumes:
      - base_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.env.local
    networks:
      - base_prod_nw

  mailpit:
    image: axllent/mailpit:v1.15
    container_name: estate_prod_mailpit
    ports:
      - "8025:8025"
      - "1025:1025"
    volumes:  
      - base_prod_mailpit_data:/data
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATA_FILE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1  
    networks:
      - base_prod_nw

  client:
    build:
      context: ./client
      dockerfile: ./docker/local/Dockerfile
    container_name: base_client
    image: base_client
    # ports:
    #   - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    # add this line(uncomment it) so that hot module reloading can work when working with windows subsystem for linux. 
    # environment:
    #   - WATCHPACK_POLLING=true
    networks:
      - base_prod_nw

  # redis:
  #   image: redis:7.0-alpine3.19
  #   command: redis-server --appendonly yes
  #   container_name: estate_redis
  #   volumes:
  #     - base_redis_prod_data:/data
  #   networks:
  #     - base_prod_nw

  # celeryworker:
  #   <<: *api
  #   image: base_prod_celeryworker
  #   container_name: base_prod_celeryworker
  #   command: /start-celeryworker

  # celerybeat:
  #   <<: *api
  #   image: base_prod_celerybeat
  #   container_name: base_prod_celerybeat
  #   command: /start-celerybeat

  # flower:
  #   <<: *api
  #   image: base_prod_flower
  #   container_name: base_prod_flower
  #   ports:
  #     - "5555:5555"
  #   command: /start-flower

  
  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    restart: always
    container_name: base_nginx
    ports:
      - "8080:80"
    volumes:
      - ./staticfiles:/app/staticfiles
      - logs_store:/var/log/nginx
    depends_on:
      - api
    networks:
      - base_prod_nw
    

networks:
  base_prod_nw:
    external: true

volumes:
  base_postgres_data: {}
  base_prod_mailpit_data: {}
  logs_store: {}
  # base_redis_prod_data: {}


